# Generated by Django 5.2.4 on 2025-10-11 17:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_completo', models.CharField(max_length=255, verbose_name='Nome Completo do Aluno')),
                ('data_nascimento', models.DateField(verbose_name='Data de Nascimento')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, verbose_name='Data de Cadastro')),
                ('nivel_autismo', models.IntegerField(blank=True, choices=[(1, 'Nível 1 - Exige apoio'), (2, 'Nível 2 - Exige apoio substancial'), (3, 'Nível 3 - Exige apoio muito substancial')], null=True, verbose_name='Nível de Suporte (Autismo)')),
                ('laudo_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='Laudo (URL do Arquivo)')),
            ],
            options={
                'verbose_name': 'Aluno',
                'verbose_name_plural': 'Alunos',
                'ordering': ['nome_completo'],
            },
        ),
        migrations.CreateModel(
            name='CategoriaContato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('icone', models.CharField(choices=[('fas fa-book-open', 'Livro Aberto (Definições, Contexto)'), ('fas fa-stethoscope', 'Estetoscópio (Diagnóstico, Tratamento)'), ('fas fa-gavel', 'Martelo (Legislação, Direitos)'), ('fas fa-graduation-cap', 'Chapéu de Formatura (Educação)'), ('fas fa-comment-medical', 'Balão de Fala (Terapias)'), ('fas fa-hands-helping', 'Mãos Ajudando (Apoio, ONGs)'), ('fas fa-clinic-medical', 'Clínica (Clínicas, Hospitais)'), ('fas fa-user-md', 'Médico (Profissionais de Saúde)'), ('fas fa-users', 'Grupo de Pessoas (Grupos de Apoio)'), ('fas fa-building-ngo', 'Prédio (Associações)'), ('fas fa-info-circle', 'Círculo de Informação (Geral)'), ('fas fa-question-circle', 'Círculo de Interrogação (Padrão)'), ('fas fa-tools', 'Ferramentas (Ferramentas)')], default='fas fa-question-circle', max_length=50, verbose_name='Ícone')),
            ],
            options={
                'verbose_name': 'Categoria de Contato',
                'verbose_name_plural': 'Categorias de Contatos',
            },
        ),
        migrations.CreateModel(
            name='CategoriaFAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('icone', models.CharField(choices=[('fas fa-book-open', 'Livro Aberto (Definições, Contexto)'), ('fas fa-stethoscope', 'Estetoscópio (Diagnóstico, Tratamento)'), ('fas fa-gavel', 'Martelo (Legislação, Direitos)'), ('fas fa-graduation-cap', 'Chapéu de Formatura (Educação)'), ('fas fa-comment-medical', 'Balão de Fala (Terapias)'), ('fas fa-hands-helping', 'Mãos Ajudando (Apoio, ONGs)'), ('fas fa-clinic-medical', 'Clínica (Clínicas, Hospitais)'), ('fas fa-user-md', 'Médico (Profissionais de Saúde)'), ('fas fa-users', 'Grupo de Pessoas (Grupos de Apoio)'), ('fas fa-building-ngo', 'Prédio (Associações)'), ('fas fa-info-circle', 'Círculo de Informação (Geral)'), ('fas fa-question-circle', 'Círculo de Interrogação (Padrão)'), ('fas fa-tools', 'Ferramentas (Ferramentas)')], default='fas fa-question-circle', max_length=50, verbose_name='Ícone')),
            ],
            options={
                'verbose_name': 'Categoria de Dúvida',
                'verbose_name_plural': 'Categorias de Dúvidas',
            },
        ),
        migrations.CreateModel(
            name='CategoriaFerramenta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('icone', models.CharField(choices=[('fas fa-book-open', 'Livro Aberto (Definições, Contexto)'), ('fas fa-stethoscope', 'Estetoscópio (Diagnóstico, Tratamento)'), ('fas fa-gavel', 'Martelo (Legislação, Direitos)'), ('fas fa-graduation-cap', 'Chapéu de Formatura (Educação)'), ('fas fa-comment-medical', 'Balão de Fala (Terapias)'), ('fas fa-hands-helping', 'Mãos Ajudando (Apoio, ONGs)'), ('fas fa-clinic-medical', 'Clínica (Clínicas, Hospitais)'), ('fas fa-user-md', 'Médico (Profissionais de Saúde)'), ('fas fa-users', 'Grupo de Pessoas (Grupos de Apoio)'), ('fas fa-building-ngo', 'Prédio (Associações)'), ('fas fa-info-circle', 'Círculo de Informação (Geral)'), ('fas fa-question-circle', 'Círculo de Interrogação (Padrão)'), ('fas fa-tools', 'Ferramentas (Ferramentas)')], default='fas fa-question-circle', max_length=50, verbose_name='Ícone')),
            ],
            options={
                'verbose_name': 'Categoria de Ferramenta',
                'verbose_name_plural': 'Categorias de Ferramentas',
            },
        ),
        migrations.CreateModel(
            name='Turma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Turma')),
            ],
            options={
                'verbose_name': 'Turma',
                'verbose_name_plural': 'Turmas',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_professor', models.BooleanField(default=False, verbose_name='É professor?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200)),
                ('descricao', models.TextField()),
                ('imagem_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL da Imagem')),
                ('rua', models.CharField(blank=True, max_length=200, null=True)),
                ('numero', models.CharField(blank=True, max_length=20, null=True)),
                ('complemento', models.CharField(blank=True, max_length=100, null=True)),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('cidade', models.CharField(max_length=100)),
                ('estado', models.CharField(max_length=50)),
                ('cep', models.CharField(blank=True, max_length=9, null=True)),
                ('telefone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('site', models.URLField(blank=True, null=True)),
                ('horario_funcionamento', models.CharField(max_length=100)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('whatsapp', models.CharField(blank=True, help_text='Número com código do país (ex: 5511999999999)', max_length=20, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('atendimento_presencial', models.BooleanField(default=True)),
                ('atendimento_online', models.BooleanField(default=False)),
                ('especialidades', models.TextField(blank=True, help_text='Liste as especialidades separadas por vírgula', null=True)),
                ('convenios', models.TextField(blank=True, help_text='Convênios aceitos', null=True)),
                ('observacoes', models.TextField(blank=True, null=True)),
                ('categoria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contatos', to='core.categoriacontato')),
            ],
            options={
                'verbose_name': 'Contato',
                'verbose_name_plural': 'Contatos',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pergunta', models.CharField(max_length=255)),
                ('resposta', models.TextField()),
                ('fonte', models.URLField(blank=True, max_length=255, null=True, verbose_name='Fonte')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='core.categoriafaq')),
            ],
        ),
        migrations.CreateModel(
            name='Ferramenta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome da Ferramenta')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('icone_classe', models.CharField(default='fas fa-tools', max_length=50, verbose_name='Ícone (Classe Font Awesome)')),
                ('eh_gratuita', models.BooleanField(default=True, verbose_name='É Gratuita?')),
                ('classificacao', models.DecimalField(decimal_places=1, default=0.0, max_digits=3, verbose_name='Classificação (0.0 a 5.0)')),
                ('apenas_para_professores', models.BooleanField(default=False, verbose_name='Apenas para professores?')),
                ('imagem_capa_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL da Imagem de Capa')),
                ('arquivo_pdf_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL do Arquivo PDF')),
                ('publico_alvo', models.CharField(blank=True, choices=[('pais_familiares', 'Pais e Familiares'), ('professores', 'Professores'), ('terapeutas', 'Terapeutas'), ('criancas_jovens', 'Crianças e Jovens'), ('todos', 'Todos os Públicos')], max_length=50, null=True, verbose_name='Público-Alvo')),
                ('habilidades_desenvolvidas', models.CharField(blank=True, help_text='Ex: Comunicação, Interação Social, Coordenação Motora', max_length=255, null=True, verbose_name='Habilidades Desenvolvidas')),
                ('autor', models.CharField(blank=True, max_length=150, null=True, verbose_name='Autor/Fonte')),
                ('categoria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ferramentas', to='core.categoriaferramenta')),
            ],
        ),
        migrations.CreateModel(
            name='FotoContato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imagem_url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL da Imagem')),
                ('legenda', models.CharField(blank=True, max_length=200, null=True)),
                ('ordem', models.PositiveIntegerField(default=0)),
                ('contato', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fotos', to='core.contato')),
            ],
            options={
                'verbose_name': 'Foto do Contato',
                'verbose_name_plural': 'Fotos dos Contatos',
                'ordering': ['ordem'],
            },
        ),
        migrations.CreateModel(
            name='RelatorioDesempenho',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200, verbose_name='Título do Relatório')),
                ('relato', models.TextField(verbose_name='Relato de Desempenho')),
                ('data_relatorio', models.DateTimeField(auto_now_add=True, verbose_name='Data do Relatório')),
                ('aluno', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relatorios', to='core.aluno', verbose_name='Aluno')),
                ('professor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='relatorios_criados', to=settings.AUTH_USER_MODEL, verbose_name='Professor')),
            ],
            options={
                'verbose_name': 'Relatório de Desempenho',
                'verbose_name_plural': 'Relatórios de Desempenho',
                'ordering': ['-data_relatorio'],
            },
        ),
        migrations.AddField(
            model_name='aluno',
            name='turma',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alunos', to='core.turma', verbose_name='Turma Regular'),
        ),
        migrations.CreateModel(
            name='UserDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_download', models.DateTimeField(auto_now_add=True)),
                ('ferramenta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ferramenta')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Download',
                'verbose_name_plural': 'Downloads',
                'ordering': ['-data_download'],
            },
        ),
        migrations.CreateModel(
            name='UserSavedContato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_salva', models.DateTimeField(auto_now_add=True, verbose_name='Data de Salvamento')),
                ('contato', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by_users', to='core.contato', verbose_name='Contato')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_contatos', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Contato Salvo',
                'verbose_name_plural': 'Contatos Salvos',
                'ordering': ['-data_salva'],
                'indexes': [models.Index(fields=['user', '-data_salva'], name='core_usersa_user_id_fadf65_idx'), models.Index(fields=['contato'], name='core_usersa_contato_886516_idx')],
                'unique_together': {('user', 'contato')},
            },
        ),
        migrations.CreateModel(
            name='UserSavedFAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_salva', models.DateTimeField(auto_now_add=True, verbose_name='Data de Salvamento')),
                ('faq', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by_users', to='core.faq', verbose_name='Dúvida Frequente')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_faqs', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Dúvida Salva',
                'verbose_name_plural': 'Dúvidas Salvas',
                'ordering': ['-data_salva'],
                'indexes': [models.Index(fields=['user', '-data_salva'], name='core_usersa_user_id_b0fbee_idx'), models.Index(fields=['faq'], name='core_usersa_faq_id_0baaca_idx')],
                'unique_together': {('user', 'faq')},
            },
        ),
    ]
